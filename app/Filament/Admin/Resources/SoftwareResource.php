<?php

namespace App\Filament\Admin\Resources;

use App\Filament\Admin\Resources\SoftwareResource\Pages;
use App\Models\Software;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use App\Filament\Admin\Resources\SoftwareResource\RelationManagers\SoftwareTranslationsRelationManager;
use Illuminate\Support\Str;
use Illuminate\Support\Facades\Storage;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\Toggle;
use Filament\Tables\Filters\SelectFilter;
use Filament\Tables\Filters\TernaryFilter;

class SoftwareResource extends Resource
{
    protected static ?string $model = Software::class;

    protected static ?string $navigationIcon = 'heroicon-s-cloud-arrow-up';

    protected static ?string $navigationGroup = 'Content Management';

    protected static ?string $navigationLabel = 'Softwares';

    protected static ?int $navigationSort = 1;






    public static function form(Form $form): Form
    {
        return $form
            ->schema([
            Forms\Components\Section::make('Basic Information')
                ->description('Enter the basic details of the software.')
                ->schema([
                    Forms\Components\Grid::make(2)
                        ->schema([


                            TextInput::make('name')
                                ->required()
                                ->label('Name')
                                ->live(onBlur: true)
                                ->afterStateUpdated(function ($state, $set) {
                                    $set('slug', Str::slug($state));
                                }),

                            TextInput::make('slug')
                                ->required()
                                ->helperText('Slug will be autogenerated from name')
                                ->label('Slug')
                                ->unique(ignoreRecord: true),

                            TextInput::make('version')
                                ->required()
                                ->label('Version'),

                            TextInput::make('file_size')
                                ->required()
                                ->numeric()
                                ->label('File Size')
                                ->helperText('Filesize should be in bytes'),

                            Forms\Components\TextInput::make('download_url')
                                ->required()
                                ->url()
                                ->label('Download Url'),
        
                            Forms\Components\TextInput::make('buy_url')
                                ->url()
                                ->nullable()
                                ->label('Buy Url (Optional)'),

                            Forms\Components\FileUpload::make('logo')
                                ->label('Logo')
                                ->disk('public') // Use your configured disk
                                ->directory('software_logos') // Path inside /public/uploads
                                ->required()
                                ->avatar()
                                ->maxSize(10)
                                ->helperText('Logo image should be in webp format and max filesize is 10KB. 32x32 recommended resolution')
                                ->acceptedFileTypes(['image/webp'])
                                ->preserveFilenames(false) // Optional
                                ->visibility('public'),
                            Forms\Components\FileUpload::make('screenshots')
                                ->label('Screenshots')
                                ->multiple()
                                ->image() // Enables image-specific previews
                                ->imagePreviewHeight('100') // Adjust preview height (default is 200)
                                ->disk('public')
                                ->directory('software_screenshots')
                                ->acceptedFileTypes(['image/webp'])
                                ->maxSize(300)
                                ->maxFiles(6)
                                ->preserveFilenames(false)
                                ->visibility('public')
                                ->helperText('Upload .webp images only. Max 300KB each. 1060x708 recommended resolution. Max files is 6.')
                                ->panelLayout('grid') // cleaner preview for multiple
                                ->loadingIndicatorPosition('left')
                                ->uploadButtonPosition('right')
                                ->removeUploadedFileButtonPosition('right'),
                        ]),


                ]),

            Forms\Components\Section::make('Additional Information')
                ->description('Select the relevant category, platform, and other details.')
                ->schema([
                    Forms\Components\Grid::make(2)
                        ->schema([
                            Select::make('author_id')
                                ->required()
                                ->searchable()
                                ->preload()
                                ->label('Author')
                                ->relationship('author', 'name'),

                            Select::make('category_id')
                                ->required()
                                ->searchable()
                                ->preload()
                                ->relationship('category', 'slug'),

                            Select::make('license_id')
                                ->required()
                                ->relationship('license', 'slug'),

                            Select::make('platform_id')
                                ->required()
                                ->relationship('platform', 'name'),

                            Select::make('requirements')
                                ->relationship('requirements', 'name')
                                ->multiple()
                                ->required()
                                ->searchable()
                                ->preload()
                                ->columnSpanFull(),

                            Toggle::make('is_sponsored')
                                ->label('Sponsored'),

                            Toggle::make('is_featured')
                                ->label('Featured'),
                        ]),
                ]),





            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->query(fn () => Software::query()->withCount('softwareTranslations'))
            ->columns([
                Tables\Columns\ImageColumn::make('logo')
                            ->disk('public')
                            ->height(32)
                            ->width(32)
                            ->circular()
                            ->label('Logo')
                            ->alignment('center'),
                Tables\Columns\TextColumn::make('name')->searchable()->alignment('center'),
                Tables\Columns\TextColumn::make('slug')->searchable()->alignment('center'),
                Tables\Columns\TextColumn::make('version')->alignment('center'),
                Tables\Columns\TextColumn::make('platform.name')->label('OS')->badge()->alignment('center'),
                Tables\Columns\TextColumn::make('software_translations_count')
                            ->counts('softwareTranslations')
                            ->label('Translations')
                            ->badge()
                            ->alignment('center')
                            ->color('primary'),
                Tables\Columns\TextColumn::make('downloads')
                            ->label('Downloads')
                            ->alignment('center')
                            ->formatStateUsing(function ($state) {
                                if ($state >= 1_000_000) {
                                    return round($state / 1_000_000, 1) . 'M';
                                } elseif ($state >= 1_000) {
                                    return round($state / 1_000, 1) . 'K';
                                }
                        
                                return number_format($state); // fallback for < 1000
                            }),                Tables\Columns\TextColumn::make('created_at')->date('F j, Y')->alignment('center'),
                Tables\Columns\TextColumn::make('updated_at')->date('F j, Y')->alignment('center'),
                Tables\Columns\ImageColumn::make('screenshots')
                            ->disk('public')
                            ->stacked()
                            ->label('Screenshots')
                            ->circular()
                            ->limit(2)
                            ->extraImgAttributes(['loading' => 'lazy'])
                            ->limitedRemainingText()
                            ->alignment('center'),
                Tables\Columns\TextColumn::make('is_featured')
                            ->label('Featured')
                            ->badge()
                            ->alignment('center')
                            ->formatStateUsing(fn (bool $state) => $state ? 'Yes' : 'No')
                            ->color(fn (bool $state): string => $state ? 'success' : 'gray'),
                Tables\Columns\TextColumn::make('is_sponsored')
                            ->label('Sponsored')
                            ->badge()
                            ->alignment('center')
                            ->formatStateUsing(fn (bool $state) => $state ? 'Yes' : 'No')
                            ->color(fn (bool $state): string => $state ? 'success' : 'gray'),





            ])
            ->filters([
                SelectFilter::make('platform_id')
                ->label('OS')
                ->preload()
                ->relationship('platform', 'name')
                ->searchable(),
                TernaryFilter::make('is_featured')
                ->label('Featured'),
                TernaryFilter::make('is_sponsored')
                ->label('Sponsored'),
            ])
            ->actions([
                Tables\Actions\EditAction::make(),
                Tables\Actions\DeleteAction::make()
                ->before(function ($record) {
                    if ($record->logo && Storage::disk('public')->exists($record->logo)) {
                        Storage::disk('public')->delete($record->logo);
                    }
                }),

            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make()
                    ->before(function ($records) {
                        foreach ($records as $record) {
                            if ($record->logo && Storage::disk('public')->exists($record->logo)) {
                                Storage::disk('public')->delete($record->logo);
                            }
                        }
                    }),
                ]),
            ]);
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListSoftware::route('/'),
            'create' => Pages\CreateSoftware::route('/create'),
            'edit' => Pages\EditSoftware::route('/{record}/edit'),
        ];
    }

    public static function getRelations(): array
    {
        return [
            SoftwareTranslationsRelationManager::class,

        ];
    }



}
